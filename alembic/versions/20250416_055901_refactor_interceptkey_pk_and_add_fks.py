"""Refactor InterceptKey PK and add FKs

Revision ID: da1e1d3590fb
Revises: 
Create Date: 2025-04-16 05:59:01.635326

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'da1e1d3590fb'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('intercept_keys',
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('intercept_key', sa.String(length=200), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('is_valid', sa.Boolean(), nullable=False),
    sa.Column('user_is_guest', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('intercept_key'),
    sa.UniqueConstraint('intercept_key')
    )
    op.create_index(op.f('ix_intercept_keys_user_id'), 'intercept_keys', ['user_id'], unique=False)
    op.create_table('openrouter_guest_keys',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('or_key_hash', sa.String(), nullable=False),
    sa.Column('or_name', sa.String(), nullable=False),
    sa.Column('or_label', sa.String(), nullable=False),
    sa.Column('or_disabled', sa.Boolean(), nullable=True),
    sa.Column('or_limit', sa.Integer(), nullable=True),
    sa.Column('or_created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('or_updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('or_key', sa.String(), nullable=False),
    sa.Column('or_usage', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_openrouter_guest_keys_or_key_hash'), 'openrouter_guest_keys', ['or_key_hash'], unique=True)
    op.create_table('requests_log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('log_timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('intercept_key', sa.String(length=200), nullable=True),
    sa.Column('request_method', sa.String(), nullable=True),
    sa.Column('request_url', sa.String(), nullable=True),
    sa.Column('request_headers', sa.JSON(), nullable=True),
    sa.Column('request_body', sa.JSON(), nullable=True),
    sa.Column('response_status_code', sa.Integer(), nullable=True),
    sa.Column('response_headers', sa.JSON(), nullable=True),
    sa.Column('response_body', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['intercept_key'], ['intercept_keys.intercept_key'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_requests_log_intercept_key'), 'requests_log', ['intercept_key'], unique=False)
    op.create_table('completions_requests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('request_log_id', sa.UUID(), nullable=True),
    sa.Column('intercept_key', sa.String(length=200), nullable=True),
    sa.Column('messages', sa.JSON(), nullable=True),
    sa.Column('messages_hash', sa.String(), nullable=True),
    sa.Column('model', sa.String(), nullable=True),
    sa.Column('response_format', sa.JSON(), nullable=True),
    sa.Column('response_format_hash', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['intercept_key'], ['intercept_keys.intercept_key'], ),
    sa.ForeignKeyConstraint(['request_log_id'], ['requests_log.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_completions_requests_intercept_key'), 'completions_requests', ['intercept_key'], unique=False)
    op.create_table('completion_responses',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('completion_request_id', sa.UUID(), nullable=True),
    sa.Column('provider', sa.String(), nullable=True),
    sa.Column('model', sa.String(), nullable=True),
    sa.Column('created', sa.Integer(), nullable=True),
    sa.Column('prompt_tokens', sa.Integer(), nullable=True),
    sa.Column('completion_tokens', sa.Integer(), nullable=True),
    sa.Column('total_tokens', sa.Integer(), nullable=True),
    sa.Column('choice_finish_reason', sa.String(), nullable=True),
    sa.Column('choice_role', sa.String(), nullable=True),
    sa.Column('choice_content', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['completion_request_id'], ['completions_requests.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('completion_annotations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('completion_id', sa.String(), nullable=True),
    sa.Column('rater_id', sa.String(), nullable=True),
    sa.Column('reward', sa.Float(), nullable=True),
    sa.Column('annotation_metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['completion_id'], ['completion_responses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('completions_rater_notifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('rater_id', sa.String(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('intercept_key', sa.String(length=200), nullable=True),
    sa.Column('completion_response_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['completion_response_id'], ['completion_responses.id'], ),
    sa.ForeignKeyConstraint(['intercept_key'], ['intercept_keys.intercept_key'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('completions_rater_notifications')
    op.drop_table('completion_annotations')
    op.drop_table('completion_responses')
    op.drop_index(op.f('ix_completions_requests_intercept_key'), table_name='completions_requests')
    op.drop_table('completions_requests')
    op.drop_index(op.f('ix_requests_log_intercept_key'), table_name='requests_log')
    op.drop_table('requests_log')
    op.drop_index(op.f('ix_openrouter_guest_keys_or_key_hash'), table_name='openrouter_guest_keys')
    op.drop_table('openrouter_guest_keys')
    op.drop_index(op.f('ix_intercept_keys_user_id'), table_name='intercept_keys')
    op.drop_table('intercept_keys')
    # ### end Alembic commands ###
